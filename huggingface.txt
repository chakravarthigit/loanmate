# Hugging Face Deployment Guide for LoanMate ML Model

This guide will walk you through the process of deploying your LoanMate loan prediction model to Hugging Face Spaces. As a machine learning developer with 5 years of experience, I'll provide clear, step-by-step instructions to ensure a smooth deployment.

## 1. Prerequisites

- A Hugging Face account (sign up at [huggingface.co](https://huggingface.co) if you don't have one)
- Git installed on your local machine
- Your trained model files (loan_master_model.pkl)
- Basic understanding of Python and Flask

## 2. Prepare Your Repository Structure

Create a new directory structure for your Hugging Face deployment:

```bash
mkdir -p huggingface_deployment/app
cd huggingface_deployment
```

## 3. Create Essential Files

### 3.1. requirements.txt

Create a requirements.txt file with the necessary dependencies:

```bash
touch requirements.txt
```

Add the following content to requirements.txt:

```text
numpy==1.24.3
pandas==2.0.2
scikit-learn==1.3.0
matplotlib==3.7.2
seaborn==0.12.2
xgboost==1.7.5
lightgbm==4.0.0
flask==2.2.5
joblib==1.3.1
plotly==5.15.0
gunicorn==20.1.0
gradio==3.50.2
```

### 3.2. app.py

Create a simplified app.py file for Hugging Face using Gradio:

```bash
touch app/app.py
```

Add the following content to app/app.py:

```python
"""
Hugging Face Deployment for LoanMate

This module provides a Gradio-based web interface for the LoanMate
loan approval prediction system.
"""

import os
import sys
import numpy as np
import pandas as pd
import joblib
import gradio as gr

# Load the model
MODEL_PATH = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "model", "loan_master_model.pkl")

# Load the model
try:
    loan_master = joblib.load(MODEL_PATH)
    print("Loan Master Model loaded successfully")
    USE_MASTER_MODEL = True
except Exception as e:
    print(f"Warning: Could not load Loan Master Model: {str(e)}")
    USE_MASTER_MODEL = False

def predict_loan_approval(loan_master, new_data, dataset_type='hugging'):
    """
    Make loan approval predictions using the master model.
    """
    if dataset_type not in loan_master['dataset_models']:
        raise ValueError(f"Dataset type '{dataset_type}' not found in model")
    
    # Get the relevant models and preprocessor
    model_info = loan_master['dataset_models'][dataset_type]
    preprocessor = model_info['preprocessor']
    ensemble = model_info['ensemble']
    
    # Preprocess the data
    X_processed = preprocessor.transform(new_data)
    
    # Make prediction
    prediction = ensemble.predict(X_processed)[0]
    probability = ensemble.predict_proba(X_processed)[0, 1]
    
    return prediction, probability

def calculate_risk_score(probability):
    """
    Calculate a risk score based on the prediction probability.
    """
    if probability >= 0.9:
        return 'Very Low Risk'
    elif probability >= 0.75:
        return 'Low Risk'
    elif probability >= 0.5:
        return 'Moderate Risk'
    elif probability >= 0.25:
        return 'High Risk'
    else:
        return 'Very High Risk'

def predict(income, credit_score, loan_amount, employment_status, age, loan_term, existing_debt, education_level):
    """
    Make a prediction for a loan application.
    """
    # Calculate derived features
    debt_to_income_ratio = (existing_debt / income) * 100 if income > 0 else 0
    loan_to_income_ratio = (loan_amount / income) * 100 if income > 0 else 0
    income_to_debt_ratio = income / (existing_debt + 1)
    
    # Create application data dictionary
    application_data = pd.DataFrame({
        'ApplicantIncome': [income],
        'CoapplicantIncome': [0],  # Default to 0 for simplicity
        'LoanAmount': [loan_amount / 1000],  # Convert to thousands as per model training
        'Loan_Amount_Term': [loan_term * 12],  # Convert years to months
        'Credit_History': [1 if credit_score >= 650 else 0],
        'Gender': ['Male'],  # Default value
        'Married': ['Yes'],  # Default value
        'Dependents': ['0'],  # Default value
        'Education': ['Graduate' if education_level in ['Bachelor', 'Master', 'PhD'] else 'Not Graduate'],
        'Self_Employed': ['Yes' if employment_status == 'Self-employed' else 'No'],
        'Property_Area': ['Urban']  # Default value
    })
    
    try:
        # Make prediction
        prediction, probability = predict_loan_approval(loan_master, application_data, dataset_type='hugging')
        
        # Calculate risk score
        risk_score = calculate_risk_score(probability)
        
        # Format results
        approval_status = "Approved" if prediction == 1 else "Rejected"
        approval_probability = f"{probability * 100:.2f}%"
        
        return f"Loan Status: {approval_status}\nApproval Probability: {approval_probability}\nRisk Assessment: {risk_score}"
    
    except Exception as e:
        return f"Error making prediction: {str(e)}"

# Create Gradio interface
demo = gr.Interface(
    fn=predict,
    inputs=[
        gr.Number(label="Annual Income ($)"),
        gr.Slider(300, 850, step=1, label="Credit Score"),
        gr.Number(label="Loan Amount ($)"),
        gr.Dropdown(["Full-time", "Part-time", "Self-employed", "Unemployed"], label="Employment Status"),
        gr.Number(label="Age"),
        gr.Slider(1, 30, step=1, label="Loan Term (years)"),
        gr.Number(label="Existing Debt ($)"),
        gr.Dropdown(["High School", "Associate", "Bachelor", "Master", "PhD"], label="Education Level")
    ],
    outputs="text",
    title="LoanMate - Loan Approval Prediction",
    description="Enter the loan application details to get a prediction.",
    examples=[
        [85000, 750, 250000, "Full-time", 35, 30, 45000, "Bachelor"],
        [42000, 630, 120000, "Part-time", 28, 15, 18000, "Associate"],
        [120000, 780, 350000, "Full-time", 45, 20, 65000, "Master"]
    ]
)

# Launch the app
if __name__ == "__main__":
    demo.launch()
else:
    # For Hugging Face Spaces
    demo.launch(share=False)
```

### 3.3. Create README.md

```bash
touch README.md
```

Add the following content to README.md:

```markdown
# LoanMate - Loan Approval Prediction Model

This is a machine learning model that predicts loan approval based on applicant information. The model uses an ensemble approach combining multiple algorithms trained on various loan datasets.

## Features

- Predicts loan approval probability
- Provides risk assessment
- Uses an ensemble of machine learning models for better accuracy
- Simple web interface for easy interaction

## How to Use

1. Enter the required information:
   - Annual Income
   - Credit Score
   - Loan Amount
   - Employment Status
   - Age
   - Loan Term
   - Existing Debt
   - Education Level

2. Click "Submit" to get the prediction result

## Model Information

This model uses an ensemble approach combining:
- Logistic Regression
- Random Forest
- Support Vector Machine
- XGBoost
- LightGBM

The model was trained on multiple loan datasets to ensure robust predictions across different scenarios.
```

## 4. Prepare Your Model Files

Create a directory for your model and copy your trained model file:

```bash
mkdir -p model
cp /Users/sivanagaraju/Desktop/Chakri\ files/finalloan/loan_master_model/loan_master_model.pkl model/
```

## 5. Create a Hugging Face Space

1. Go to [huggingface.co/spaces](https://huggingface.co/spaces)
2. Click on "Create new Space"
3. Choose a name for your space (e.g., "loanmate-prediction")
4. Select "Gradio" as the SDK
5. Choose visibility (Public or Private)
6. Click "Create Space"

## 6. Initialize Git Repository and Push to Hugging Face

```bash
# Initialize git repository
git init
git add .
git commit -m "Initial commit for LoanMate Hugging Face deployment"

# Add Hugging Face Space as remote
git remote add origin https://huggingface.co/spaces/YOUR_USERNAME/YOUR_SPACE_NAME

# Push to Hugging Face
git push -u origin main
```

Replace `YOUR_USERNAME` with your Hugging Face username and `YOUR_SPACE_NAME` with the name you chose for your space.

## 7. Monitor Deployment

1. Go to your Hugging Face Space URL: `https://huggingface.co/spaces/YOUR_USERNAME/YOUR_SPACE_NAME`
2. You should see the build logs as your app is being deployed
3. Once deployment is complete, your LoanMate prediction app will be available for use

## 8. Troubleshooting

### Common Issues:

1. **Model Loading Error**: Ensure your model file path is correct in app.py
2. **Dependency Issues**: Check if all required packages are listed in requirements.txt
3. **Memory Limits**: If your model is large, you might need to upgrade your Hugging Face Space hardware

### Solutions:

1. Check the build logs for specific error messages
2. Test your app locally before deploying
3. Consider simplifying your model if it's too large for the default hardware

## 9. Updating Your Deployment

To update your deployment after making changes:

```bash
git add .
git commit -m "Update deployment with new features"
git push origin main
```

## 10. Additional Resources

- [Hugging Face Spaces Documentation](https://huggingface.co/docs/hub/spaces)
- [Gradio Documentation](https://www.gradio.app/docs/)
- [Scikit-learn Model Deployment Best Practices](https://scikit-learn.org/stable/model_persistence.html)

Congratulations! Your LoanMate prediction model is now deployed on Hugging Face Spaces and accessible via a web interface.